interface IStorageItem {
  id: ID! @unique
  videoID: ID!
  path: String!
  bucket: String!
}

type User {
  id: ID! @unique
  email: String
  auth0Id: String @unique
  role: Role @default(value: "USER")
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: [AdminRole] @default(value: [])
}

type VideoUpload implements IVideo {
  id: ID! @unique
  adminMetadata: VideoUploadAdminMetadata
    @relation(name: "VideoUploadAdminMetadataRelation", onDelete: CASCADE)
  createdAt: DateTime!
  updatedAt: DateTime!
  metadata: VideoUploadMetadata!
    @relation(name: "VideoUploadMetadataRelation", onDelete: CASCADE)
  publishedBy: User @relation(name: "VideoPublisher")
  published: Boolean! @default(value: "false")
  # TODO: publishedVideo: Video
  statusLog: [VideoUploadStatusLogItem!]!
    @relation(name: "VideoUploadLogItemRelation")
  storageLinks: [VideoUploadStorageLink!]!
    @relation(name: "StorageLinkVideoRelation")
  submitedBy: User! @relation(name: "VideoSubmitter")
  submitedUrl: String! @unique
}

type VideoUploadStorageLink implements IStorageItem {
  id: ID! @unique
  videoUpload: VideoUpload! @relation(name: "StorageLinkVideoRelation")
  path: String!
  bucket: String!
  version: VideoUploadFileLinkVersion!
  fileType: VideoUploadFileLinkType!
}

type VideoUploadMetadata {
  id: ID! @unique
  videoUpload: VideoUpload! @unique
    @relation(name: "VideoUploadMetadataRelation", onDelete: CASCADE)
  title: String
  subtitle: String
  dateRecorded: Date
  speakers: Int! @default(value: "2")
  renderStart: Float! @default(value: "0")
  renderEnd: Float! @default(value: "0")
  generatedConversation: SpeechAPIConversation
    @relation(name: "SpeechAPIConversationVideoRelation", onDelete: CASCADE)
}

type VideoUploadAdminMetadata {
  id: ID! @unique
  videoUpload: VideoUpload!
    @relation(name: "VideoUploadAdminMetadataRelation", onDelete: CASCADE)
  advertisingEnabled: Boolean! @default(value: "false")
}

type VideoUploadStatusLogItem {
  id: ID! @unique
  status: VideoUploadLogItemStatus!
  videoUpload: VideoUpload! @relation(name: "VideoUploadLogItemRelation")
  event: VideoUploadLogItemEvent!
  createdAt: DateTime!
  timesoutAt: Int
  message: String
}

type Speaker {
  name: String! @unique
  avatarPath: String!
  title: String!
  # TODO: Transcript items relation
}

type Date {
  month: Int!
  day: Int!
  year: Int!
}

## Google Cloud Speech API Types
type SpeechAPIWord {
  id: ID! @unique
  startTime: Int!
  endTime: Int!
  word: String!
  speakerTag: Int!
}

type SpeechAPIConversationBlock {
  id: ID! @unique
  speakerTag: Int!
  words: [SpeechAPIWord!]!
    @relation(
      name: "SpeechAPIWordToConversationBlockRelation"
      onDelete: CASCADE
    )
  conversation: SpeechAPIConversation!
    @relation(name: "SpeechAPIConversationBlockToConversationRelation")
}

type SpeechAPIConversation {
  id: ID! @unique
  videoUpload: VideoUploadMetadata!
    @relation(name: "SpeechAPIConversationVideoRelation")
  conversation: [SpeechAPIConversationBlock!]!
    @relation(
      name: "SpeechAPIConversationBlockToConversationRelation"
      onDelete: CASCADE
    )
}
