# source: http://10.142.0.6:4466/trump-said-wtf/development
# timestamp: Tue Aug 07 2018 03:16:48 GMT-0700 (PDT)

enum AdminRole {
  CREATE_UPLOAD
  LIST_UPLOADS
  LIST_ALL_UPLOADS
  ADVANCE_UPLOADS
  PUBLISH_UPLOAD
  DELETE_UPLOADS
}

type AggregateDate {
  count: Int!
}

type AggregatePublication {
  count: Int!
}

type AggregateSource {
  count: Int!
}

type AggregateSpeaker {
  count: Int!
}

type AggregateSpeechAPIConversation {
  count: Int!
}

type AggregateSpeechAPIConversationBlock {
  count: Int!
}

type AggregateSpeechAPIWord {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateThumbnail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type AggregateVideoMetadata {
  count: Int!
}

type AggregateVideoStorageLink {
  count: Int!
}

type AggregateVideoUpload {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Date {
  month: Int!
  day: Int!
  year: Int!
}

"""A connection to a list of items."""
type DateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DateEdge]!
  aggregate: AggregateDate!
}

input DateCreateInput {
  month: Int!
  day: Int!
  year: Int!
}

input DateCreateOneInput {
  create: DateCreateInput
}

"""An edge in a connection."""
type DateEdge {
  """The item at the end of the edge."""
  node: Date!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DateOrderByInput {
  month_ASC
  month_DESC
  day_ASC
  day_DESC
  year_ASC
  year_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DatePreviousValues {
  month: Int!
  day: Int!
  year: Int!
}

type DateSubscriptionPayload {
  mutation: MutationType!
  node: Date
  updatedFields: [String!]
  previousValues: DatePreviousValues
}

input DateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DateWhereInput
}

scalar DateTime

input DateUpdateDataInput {
  month: Int
  day: Int
  year: Int
}

input DateUpdateInput {
  month: Int
  day: Int
  year: Int
}

input DateUpdateOneInput {
  create: DateCreateInput
  disconnect: Boolean
  delete: Boolean
  update: DateUpdateDataInput
  upsert: DateUpsertNestedInput
}

input DateUpsertNestedInput {
  update: DateUpdateDataInput!
  create: DateCreateInput!
}

input DateWhereInput {
  """Logical AND on all given filters."""
  AND: [DateWhereInput!]

  """Logical OR on all given filters."""
  OR: [DateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DateWhereInput!]
  month: Int

  """All values that are not equal to given value."""
  month_not: Int

  """All values that are contained in given list."""
  month_in: [Int!]

  """All values that are not contained in given list."""
  month_not_in: [Int!]

  """All values less than the given value."""
  month_lt: Int

  """All values less than or equal the given value."""
  month_lte: Int

  """All values greater than the given value."""
  month_gt: Int

  """All values greater than or equal the given value."""
  month_gte: Int
  day: Int

  """All values that are not equal to given value."""
  day_not: Int

  """All values that are contained in given list."""
  day_in: [Int!]

  """All values that are not contained in given list."""
  day_not_in: [Int!]

  """All values less than the given value."""
  day_lt: Int

  """All values less than or equal the given value."""
  day_lte: Int

  """All values greater than the given value."""
  day_gt: Int

  """All values greater than or equal the given value."""
  day_gte: Int
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  _MagicalBackRelation_DateToVideoMetadata_every: VideoMetadataWhereInput
  _MagicalBackRelation_DateToVideoMetadata_some: VideoMetadataWhereInput
  _MagicalBackRelation_DateToVideoMetadata_none: VideoMetadataWhereInput
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSpeaker(data: SpeakerCreateInput!): Speaker!
  createSpeechAPIConversation(data: SpeechAPIConversationCreateInput!): SpeechAPIConversation!
  createSource(data: SourceCreateInput!): Source!
  createPublication(data: PublicationCreateInput!): Publication!
  createDate(data: DateCreateInput!): Date!
  createThumbnail(data: ThumbnailCreateInput!): Thumbnail!
  createUser(data: UserCreateInput!): User!
  createVideoMetadata(data: VideoMetadataCreateInput!): VideoMetadata!
  createSpeechAPIWord(data: SpeechAPIWordCreateInput!): SpeechAPIWord!
  createSpeechAPIConversationBlock(data: SpeechAPIConversationBlockCreateInput!): SpeechAPIConversationBlock!
  createVideoUpload(data: VideoUploadCreateInput!): VideoUpload!
  createTag(data: TagCreateInput!): Tag!
  createVideoStorageLink(data: VideoStorageLinkCreateInput!): VideoStorageLink!
  createVideo(data: VideoCreateInput!): Video!
  updateSpeaker(data: SpeakerUpdateInput!, where: SpeakerWhereUniqueInput!): Speaker
  updateSpeechAPIConversation(data: SpeechAPIConversationUpdateInput!, where: SpeechAPIConversationWhereUniqueInput!): SpeechAPIConversation
  updateThumbnail(data: ThumbnailUpdateInput!, where: ThumbnailWhereUniqueInput!): Thumbnail
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateSpeechAPIWord(data: SpeechAPIWordUpdateInput!, where: SpeechAPIWordWhereUniqueInput!): SpeechAPIWord
  updateSpeechAPIConversationBlock(data: SpeechAPIConversationBlockUpdateInput!, where: SpeechAPIConversationBlockWhereUniqueInput!): SpeechAPIConversationBlock
  updateVideoUpload(data: VideoUploadUpdateInput!, where: VideoUploadWhereUniqueInput!): VideoUpload
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateVideoStorageLink(data: VideoStorageLinkUpdateInput!, where: VideoStorageLinkWhereUniqueInput!): VideoStorageLink
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  deleteSpeaker(where: SpeakerWhereUniqueInput!): Speaker
  deleteSpeechAPIConversation(where: SpeechAPIConversationWhereUniqueInput!): SpeechAPIConversation
  deleteThumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  deleteUser(where: UserWhereUniqueInput!): User
  deleteSpeechAPIWord(where: SpeechAPIWordWhereUniqueInput!): SpeechAPIWord
  deleteSpeechAPIConversationBlock(where: SpeechAPIConversationBlockWhereUniqueInput!): SpeechAPIConversationBlock
  deleteVideoUpload(where: VideoUploadWhereUniqueInput!): VideoUpload
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteVideoStorageLink(where: VideoStorageLinkWhereUniqueInput!): VideoStorageLink
  deleteVideo(where: VideoWhereUniqueInput!): Video
  upsertSpeaker(where: SpeakerWhereUniqueInput!, create: SpeakerCreateInput!, update: SpeakerUpdateInput!): Speaker!
  upsertSpeechAPIConversation(where: SpeechAPIConversationWhereUniqueInput!, create: SpeechAPIConversationCreateInput!, update: SpeechAPIConversationUpdateInput!): SpeechAPIConversation!
  upsertThumbnail(where: ThumbnailWhereUniqueInput!, create: ThumbnailCreateInput!, update: ThumbnailUpdateInput!): Thumbnail!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertSpeechAPIWord(where: SpeechAPIWordWhereUniqueInput!, create: SpeechAPIWordCreateInput!, update: SpeechAPIWordUpdateInput!): SpeechAPIWord!
  upsertSpeechAPIConversationBlock(where: SpeechAPIConversationBlockWhereUniqueInput!, create: SpeechAPIConversationBlockCreateInput!, update: SpeechAPIConversationBlockUpdateInput!): SpeechAPIConversationBlock!
  upsertVideoUpload(where: VideoUploadWhereUniqueInput!, create: VideoUploadCreateInput!, update: VideoUploadUpdateInput!): VideoUpload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertVideoStorageLink(where: VideoStorageLinkWhereUniqueInput!, create: VideoStorageLinkCreateInput!, update: VideoStorageLinkUpdateInput!): VideoStorageLink!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  updateManySpeakers(data: SpeakerUpdateInput!, where: SpeakerWhereInput): BatchPayload!
  updateManySpeechAPIConversations(data: SpeechAPIConversationUpdateInput!, where: SpeechAPIConversationWhereInput): BatchPayload!
  updateManySources(data: SourceUpdateInput!, where: SourceWhereInput): BatchPayload!
  updateManyPublications(data: PublicationUpdateInput!, where: PublicationWhereInput): BatchPayload!
  updateManyDates(data: DateUpdateInput!, where: DateWhereInput): BatchPayload!
  updateManyThumbnails(data: ThumbnailUpdateInput!, where: ThumbnailWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyVideoMetadatas(data: VideoMetadataUpdateInput!, where: VideoMetadataWhereInput): BatchPayload!
  updateManySpeechAPIWords(data: SpeechAPIWordUpdateInput!, where: SpeechAPIWordWhereInput): BatchPayload!
  updateManySpeechAPIConversationBlocks(data: SpeechAPIConversationBlockUpdateInput!, where: SpeechAPIConversationBlockWhereInput): BatchPayload!
  updateManyVideoUploads(data: VideoUploadUpdateInput!, where: VideoUploadWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManyVideoStorageLinks(data: VideoStorageLinkUpdateInput!, where: VideoStorageLinkWhereInput): BatchPayload!
  updateManyVideos(data: VideoUpdateInput!, where: VideoWhereInput): BatchPayload!
  deleteManySpeakers(where: SpeakerWhereInput): BatchPayload!
  deleteManySpeechAPIConversations(where: SpeechAPIConversationWhereInput): BatchPayload!
  deleteManySources(where: SourceWhereInput): BatchPayload!
  deleteManyPublications(where: PublicationWhereInput): BatchPayload!
  deleteManyDates(where: DateWhereInput): BatchPayload!
  deleteManyThumbnails(where: ThumbnailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyVideoMetadatas(where: VideoMetadataWhereInput): BatchPayload!
  deleteManySpeechAPIWords(where: SpeechAPIWordWhereInput): BatchPayload!
  deleteManySpeechAPIConversationBlocks(where: SpeechAPIConversationBlockWhereInput): BatchPayload!
  deleteManyVideoUploads(where: VideoUploadWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyVideoStorageLinks(where: VideoStorageLinkWhereInput): BatchPayload!
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Publication {
  avatarPath: String!
  name: String!
}

"""A connection to a list of items."""
type PublicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PublicationEdge]!
  aggregate: AggregatePublication!
}

input PublicationCreateInput {
  avatarPath: String!
  name: String!
}

input PublicationCreateOneInput {
  create: PublicationCreateInput
}

"""An edge in a connection."""
type PublicationEdge {
  """The item at the end of the edge."""
  node: Publication!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PublicationOrderByInput {
  avatarPath_ASC
  avatarPath_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PublicationPreviousValues {
  avatarPath: String!
  name: String!
}

type PublicationSubscriptionPayload {
  mutation: MutationType!
  node: Publication
  updatedFields: [String!]
  previousValues: PublicationPreviousValues
}

input PublicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PublicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PublicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PublicationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PublicationWhereInput
}

input PublicationUpdateDataInput {
  avatarPath: String
  name: String
}

input PublicationUpdateInput {
  avatarPath: String
  name: String
}

input PublicationUpdateOneInput {
  create: PublicationCreateInput
  delete: Boolean
  update: PublicationUpdateDataInput
  upsert: PublicationUpsertNestedInput
}

input PublicationUpsertNestedInput {
  update: PublicationUpdateDataInput!
  create: PublicationCreateInput!
}

input PublicationWhereInput {
  """Logical AND on all given filters."""
  AND: [PublicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [PublicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PublicationWhereInput!]
  avatarPath: String

  """All values that are not equal to given value."""
  avatarPath_not: String

  """All values that are contained in given list."""
  avatarPath_in: [String!]

  """All values that are not contained in given list."""
  avatarPath_not_in: [String!]

  """All values less than the given value."""
  avatarPath_lt: String

  """All values less than or equal the given value."""
  avatarPath_lte: String

  """All values greater than the given value."""
  avatarPath_gt: String

  """All values greater than or equal the given value."""
  avatarPath_gte: String

  """All values containing the given string."""
  avatarPath_contains: String

  """All values not containing the given string."""
  avatarPath_not_contains: String

  """All values starting with the given string."""
  avatarPath_starts_with: String

  """All values not starting with the given string."""
  avatarPath_not_starts_with: String

  """All values ending with the given string."""
  avatarPath_ends_with: String

  """All values not ending with the given string."""
  avatarPath_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  _MagicalBackRelation_PublicationToSource_every: SourceWhereInput
  _MagicalBackRelation_PublicationToSource_some: SourceWhereInput
  _MagicalBackRelation_PublicationToSource_none: SourceWhereInput
}

type Query {
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker]!
  speechAPIConversations(where: SpeechAPIConversationWhereInput, orderBy: SpeechAPIConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeechAPIConversation]!
  sources(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Source]!
  publications(where: PublicationWhereInput, orderBy: PublicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Publication]!
  dates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date]!
  thumbnails(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thumbnail]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  videoMetadatas(where: VideoMetadataWhereInput, orderBy: VideoMetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoMetadata]!
  speechAPIWords(where: SpeechAPIWordWhereInput, orderBy: SpeechAPIWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeechAPIWord]!
  speechAPIConversationBlocks(where: SpeechAPIConversationBlockWhereInput, orderBy: SpeechAPIConversationBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeechAPIConversationBlock]!
  videoUploads(where: VideoUploadWhereInput, orderBy: VideoUploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoUpload]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  videoStorageLinks(where: VideoStorageLinkWhereInput, orderBy: VideoStorageLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoStorageLink]!
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  speaker(where: SpeakerWhereUniqueInput!): Speaker
  speechAPIConversation(where: SpeechAPIConversationWhereUniqueInput!): SpeechAPIConversation
  thumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  user(where: UserWhereUniqueInput!): User
  speechAPIWord(where: SpeechAPIWordWhereUniqueInput!): SpeechAPIWord
  speechAPIConversationBlock(where: SpeechAPIConversationBlockWhereUniqueInput!): SpeechAPIConversationBlock
  videoUpload(where: VideoUploadWhereUniqueInput!): VideoUpload
  tag(where: TagWhereUniqueInput!): Tag
  videoStorageLink(where: VideoStorageLinkWhereUniqueInput!): VideoStorageLink
  video(where: VideoWhereUniqueInput!): Video
  speakersConnection(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeakerConnection!
  speechAPIConversationsConnection(where: SpeechAPIConversationWhereInput, orderBy: SpeechAPIConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeechAPIConversationConnection!
  sourcesConnection(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourceConnection!
  publicationsConnection(where: PublicationWhereInput, orderBy: PublicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PublicationConnection!
  datesConnection(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DateConnection!
  thumbnailsConnection(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThumbnailConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  videoMetadatasConnection(where: VideoMetadataWhereInput, orderBy: VideoMetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoMetadataConnection!
  speechAPIWordsConnection(where: SpeechAPIWordWhereInput, orderBy: SpeechAPIWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeechAPIWordConnection!
  speechAPIConversationBlocksConnection(where: SpeechAPIConversationBlockWhereInput, orderBy: SpeechAPIConversationBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeechAPIConversationBlockConnection!
  videoUploadsConnection(where: VideoUploadWhereInput, orderBy: VideoUploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoUploadConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  videoStorageLinksConnection(where: VideoStorageLinkWhereInput, orderBy: VideoStorageLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoStorageLinkConnection!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  USER
  ADMIN
}

type Source {
  publication(where: PublicationWhereInput): Publication!
  url: String!
  title: String
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
  priority: Int!
}

"""A connection to a list of items."""
type SourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceEdge]!
  aggregate: AggregateSource!
}

input SourceCreateInput {
  url: String!
  title: String
  priority: Int
  publication: PublicationCreateOneInput!
  videos: VideoCreateManyInput
}

input SourceCreateManyInput {
  create: [SourceCreateInput!]
}

"""An edge in a connection."""
type SourceEdge {
  """The item at the end of the edge."""
  node: Source!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SourceOrderByInput {
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  priority_ASC
  priority_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SourcePreviousValues {
  url: String!
  title: String
  priority: Int!
}

type SourceSubscriptionPayload {
  mutation: MutationType!
  node: Source
  updatedFields: [String!]
  previousValues: SourcePreviousValues
}

input SourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SourceWhereInput
}

input SourceUpdateInput {
  url: String
  title: String
  priority: Int
  publication: PublicationUpdateOneInput
  videos: VideoUpdateManyInput
}

input SourceUpdateManyInput {
  create: [SourceCreateInput!]
}

input SourceWhereInput {
  """Logical AND on all given filters."""
  AND: [SourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SourceWhereInput!]
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  publication: PublicationWhereInput
  videos_every: VideoWhereInput
  videos_some: VideoWhereInput
  videos_none: VideoWhereInput
  _MagicalBackRelation_SourceToVideoMetadata_every: VideoMetadataWhereInput
  _MagicalBackRelation_SourceToVideoMetadata_some: VideoMetadataWhereInput
  _MagicalBackRelation_SourceToVideoMetadata_none: VideoMetadataWhereInput
}

type Speaker {
  name: String!
  avatarPath: String!
  title: String!
}

"""A connection to a list of items."""
type SpeakerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeakerEdge]!
  aggregate: AggregateSpeaker!
}

input SpeakerCreateInput {
  name: String!
  avatarPath: String!
  title: String!
}

"""An edge in a connection."""
type SpeakerEdge {
  """The item at the end of the edge."""
  node: Speaker!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeakerOrderByInput {
  name_ASC
  name_DESC
  avatarPath_ASC
  avatarPath_DESC
  title_ASC
  title_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpeakerPreviousValues {
  name: String!
  avatarPath: String!
  title: String!
}

type SpeakerSubscriptionPayload {
  mutation: MutationType!
  node: Speaker
  updatedFields: [String!]
  previousValues: SpeakerPreviousValues
}

input SpeakerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeakerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeakerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeakerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeakerWhereInput
}

input SpeakerUpdateInput {
  name: String
  avatarPath: String
  title: String
}

input SpeakerWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeakerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeakerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeakerWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  avatarPath: String

  """All values that are not equal to given value."""
  avatarPath_not: String

  """All values that are contained in given list."""
  avatarPath_in: [String!]

  """All values that are not contained in given list."""
  avatarPath_not_in: [String!]

  """All values less than the given value."""
  avatarPath_lt: String

  """All values less than or equal the given value."""
  avatarPath_lte: String

  """All values greater than the given value."""
  avatarPath_gt: String

  """All values greater than or equal the given value."""
  avatarPath_gte: String

  """All values containing the given string."""
  avatarPath_contains: String

  """All values not containing the given string."""
  avatarPath_not_contains: String

  """All values starting with the given string."""
  avatarPath_starts_with: String

  """All values not starting with the given string."""
  avatarPath_not_starts_with: String

  """All values ending with the given string."""
  avatarPath_ends_with: String

  """All values not ending with the given string."""
  avatarPath_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
}

input SpeakerWhereUniqueInput {
  name: String
}

type SpeechAPIConversation implements Node {
  id: ID!
  video(where: VideoUploadWhereInput): VideoUpload!
  conversation(where: SpeechAPIConversationBlockWhereInput, orderBy: SpeechAPIConversationBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeechAPIConversationBlock!]
}

type SpeechAPIConversationBlock implements Node {
  id: ID!
  speakerTag: Int!
  words(where: SpeechAPIWordWhereInput, orderBy: SpeechAPIWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeechAPIWord!]
  video(where: VideoUploadWhereInput): VideoUpload!
}

"""A connection to a list of items."""
type SpeechAPIConversationBlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeechAPIConversationBlockEdge]!
  aggregate: AggregateSpeechAPIConversationBlock!
}

input SpeechAPIConversationBlockCreateInput {
  speakerTag: Int!
  words: SpeechAPIWordCreateManyInput
  video: VideoUploadCreateOneInput!
}

input SpeechAPIConversationBlockCreateManyInput {
  create: [SpeechAPIConversationBlockCreateInput!]
  connect: [SpeechAPIConversationBlockWhereUniqueInput!]
}

"""An edge in a connection."""
type SpeechAPIConversationBlockEdge {
  """The item at the end of the edge."""
  node: SpeechAPIConversationBlock!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeechAPIConversationBlockOrderByInput {
  id_ASC
  id_DESC
  speakerTag_ASC
  speakerTag_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpeechAPIConversationBlockPreviousValues {
  id: ID!
  speakerTag: Int!
}

type SpeechAPIConversationBlockSubscriptionPayload {
  mutation: MutationType!
  node: SpeechAPIConversationBlock
  updatedFields: [String!]
  previousValues: SpeechAPIConversationBlockPreviousValues
}

input SpeechAPIConversationBlockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIConversationBlockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIConversationBlockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIConversationBlockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeechAPIConversationBlockWhereInput
}

input SpeechAPIConversationBlockUpdateDataInput {
  speakerTag: Int
  words: SpeechAPIWordUpdateManyInput
  video: VideoUploadUpdateOneInput
}

input SpeechAPIConversationBlockUpdateInput {
  speakerTag: Int
  words: SpeechAPIWordUpdateManyInput
  video: VideoUploadUpdateOneInput
}

input SpeechAPIConversationBlockUpdateManyInput {
  create: [SpeechAPIConversationBlockCreateInput!]
  connect: [SpeechAPIConversationBlockWhereUniqueInput!]
  disconnect: [SpeechAPIConversationBlockWhereUniqueInput!]
  delete: [SpeechAPIConversationBlockWhereUniqueInput!]
  update: [SpeechAPIConversationBlockUpdateWithWhereUniqueNestedInput!]
  upsert: [SpeechAPIConversationBlockUpsertWithWhereUniqueNestedInput!]
}

input SpeechAPIConversationBlockUpdateWithWhereUniqueNestedInput {
  where: SpeechAPIConversationBlockWhereUniqueInput!
  data: SpeechAPIConversationBlockUpdateDataInput!
}

input SpeechAPIConversationBlockUpsertWithWhereUniqueNestedInput {
  where: SpeechAPIConversationBlockWhereUniqueInput!
  update: SpeechAPIConversationBlockUpdateDataInput!
  create: SpeechAPIConversationBlockCreateInput!
}

input SpeechAPIConversationBlockWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIConversationBlockWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIConversationBlockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIConversationBlockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  speakerTag: Int

  """All values that are not equal to given value."""
  speakerTag_not: Int

  """All values that are contained in given list."""
  speakerTag_in: [Int!]

  """All values that are not contained in given list."""
  speakerTag_not_in: [Int!]

  """All values less than the given value."""
  speakerTag_lt: Int

  """All values less than or equal the given value."""
  speakerTag_lte: Int

  """All values greater than the given value."""
  speakerTag_gt: Int

  """All values greater than or equal the given value."""
  speakerTag_gte: Int
  words_every: SpeechAPIWordWhereInput
  words_some: SpeechAPIWordWhereInput
  words_none: SpeechAPIWordWhereInput
  video: VideoUploadWhereInput
  _MagicalBackRelation_SpeechAPIConversationToSpeechAPIConversationBlock_every: SpeechAPIConversationWhereInput
  _MagicalBackRelation_SpeechAPIConversationToSpeechAPIConversationBlock_some: SpeechAPIConversationWhereInput
  _MagicalBackRelation_SpeechAPIConversationToSpeechAPIConversationBlock_none: SpeechAPIConversationWhereInput
}

input SpeechAPIConversationBlockWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type SpeechAPIConversationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeechAPIConversationEdge]!
  aggregate: AggregateSpeechAPIConversation!
}

input SpeechAPIConversationCreateInput {
  video: VideoUploadCreateOneWithoutGeneratedConversationInput!
  conversation: SpeechAPIConversationBlockCreateManyInput
}

input SpeechAPIConversationCreateOneWithoutVideoInput {
  create: SpeechAPIConversationCreateWithoutVideoInput
  connect: SpeechAPIConversationWhereUniqueInput
}

input SpeechAPIConversationCreateWithoutVideoInput {
  conversation: SpeechAPIConversationBlockCreateManyInput
}

"""An edge in a connection."""
type SpeechAPIConversationEdge {
  """The item at the end of the edge."""
  node: SpeechAPIConversation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeechAPIConversationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpeechAPIConversationPreviousValues {
  id: ID!
}

type SpeechAPIConversationSubscriptionPayload {
  mutation: MutationType!
  node: SpeechAPIConversation
  updatedFields: [String!]
  previousValues: SpeechAPIConversationPreviousValues
}

input SpeechAPIConversationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIConversationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIConversationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIConversationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeechAPIConversationWhereInput
}

input SpeechAPIConversationUpdateInput {
  video: VideoUploadUpdateOneWithoutGeneratedConversationInput
  conversation: SpeechAPIConversationBlockUpdateManyInput
}

input SpeechAPIConversationUpdateOneWithoutVideoInput {
  create: SpeechAPIConversationCreateWithoutVideoInput
  connect: SpeechAPIConversationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SpeechAPIConversationUpdateWithoutVideoDataInput
  upsert: SpeechAPIConversationUpsertWithoutVideoInput
}

input SpeechAPIConversationUpdateWithoutVideoDataInput {
  conversation: SpeechAPIConversationBlockUpdateManyInput
}

input SpeechAPIConversationUpsertWithoutVideoInput {
  update: SpeechAPIConversationUpdateWithoutVideoDataInput!
  create: SpeechAPIConversationCreateWithoutVideoInput!
}

input SpeechAPIConversationWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIConversationWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIConversationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIConversationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  video: VideoUploadWhereInput
  conversation_every: SpeechAPIConversationBlockWhereInput
  conversation_some: SpeechAPIConversationBlockWhereInput
  conversation_none: SpeechAPIConversationBlockWhereInput
}

input SpeechAPIConversationWhereUniqueInput {
  id: ID
}

type SpeechAPIWord implements Node {
  id: ID!
  startTime: Int!
  endTime: Int!
  word: String!
  speakerTag: Int!
  video(where: VideoUploadWhereInput): VideoUpload!
}

"""A connection to a list of items."""
type SpeechAPIWordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeechAPIWordEdge]!
  aggregate: AggregateSpeechAPIWord!
}

input SpeechAPIWordCreateInput {
  startTime: Int!
  endTime: Int!
  word: String!
  speakerTag: Int!
  video: VideoUploadCreateOneInput!
}

input SpeechAPIWordCreateManyInput {
  create: [SpeechAPIWordCreateInput!]
  connect: [SpeechAPIWordWhereUniqueInput!]
}

"""An edge in a connection."""
type SpeechAPIWordEdge {
  """The item at the end of the edge."""
  node: SpeechAPIWord!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeechAPIWordOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  word_ASC
  word_DESC
  speakerTag_ASC
  speakerTag_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpeechAPIWordPreviousValues {
  id: ID!
  startTime: Int!
  endTime: Int!
  word: String!
  speakerTag: Int!
}

type SpeechAPIWordSubscriptionPayload {
  mutation: MutationType!
  node: SpeechAPIWord
  updatedFields: [String!]
  previousValues: SpeechAPIWordPreviousValues
}

input SpeechAPIWordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIWordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIWordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIWordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeechAPIWordWhereInput
}

input SpeechAPIWordUpdateDataInput {
  startTime: Int
  endTime: Int
  word: String
  speakerTag: Int
  video: VideoUploadUpdateOneInput
}

input SpeechAPIWordUpdateInput {
  startTime: Int
  endTime: Int
  word: String
  speakerTag: Int
  video: VideoUploadUpdateOneInput
}

input SpeechAPIWordUpdateManyInput {
  create: [SpeechAPIWordCreateInput!]
  connect: [SpeechAPIWordWhereUniqueInput!]
  disconnect: [SpeechAPIWordWhereUniqueInput!]
  delete: [SpeechAPIWordWhereUniqueInput!]
  update: [SpeechAPIWordUpdateWithWhereUniqueNestedInput!]
  upsert: [SpeechAPIWordUpsertWithWhereUniqueNestedInput!]
}

input SpeechAPIWordUpdateWithWhereUniqueNestedInput {
  where: SpeechAPIWordWhereUniqueInput!
  data: SpeechAPIWordUpdateDataInput!
}

input SpeechAPIWordUpsertWithWhereUniqueNestedInput {
  where: SpeechAPIWordWhereUniqueInput!
  update: SpeechAPIWordUpdateDataInput!
  create: SpeechAPIWordCreateInput!
}

input SpeechAPIWordWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeechAPIWordWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeechAPIWordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeechAPIWordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: Int

  """All values that are not equal to given value."""
  startTime_not: Int

  """All values that are contained in given list."""
  startTime_in: [Int!]

  """All values that are not contained in given list."""
  startTime_not_in: [Int!]

  """All values less than the given value."""
  startTime_lt: Int

  """All values less than or equal the given value."""
  startTime_lte: Int

  """All values greater than the given value."""
  startTime_gt: Int

  """All values greater than or equal the given value."""
  startTime_gte: Int
  endTime: Int

  """All values that are not equal to given value."""
  endTime_not: Int

  """All values that are contained in given list."""
  endTime_in: [Int!]

  """All values that are not contained in given list."""
  endTime_not_in: [Int!]

  """All values less than the given value."""
  endTime_lt: Int

  """All values less than or equal the given value."""
  endTime_lte: Int

  """All values greater than the given value."""
  endTime_gt: Int

  """All values greater than or equal the given value."""
  endTime_gte: Int
  word: String

  """All values that are not equal to given value."""
  word_not: String

  """All values that are contained in given list."""
  word_in: [String!]

  """All values that are not contained in given list."""
  word_not_in: [String!]

  """All values less than the given value."""
  word_lt: String

  """All values less than or equal the given value."""
  word_lte: String

  """All values greater than the given value."""
  word_gt: String

  """All values greater than or equal the given value."""
  word_gte: String

  """All values containing the given string."""
  word_contains: String

  """All values not containing the given string."""
  word_not_contains: String

  """All values starting with the given string."""
  word_starts_with: String

  """All values not starting with the given string."""
  word_not_starts_with: String

  """All values ending with the given string."""
  word_ends_with: String

  """All values not ending with the given string."""
  word_not_ends_with: String
  speakerTag: Int

  """All values that are not equal to given value."""
  speakerTag_not: Int

  """All values that are contained in given list."""
  speakerTag_in: [Int!]

  """All values that are not contained in given list."""
  speakerTag_not_in: [Int!]

  """All values less than the given value."""
  speakerTag_lt: Int

  """All values less than or equal the given value."""
  speakerTag_lte: Int

  """All values greater than the given value."""
  speakerTag_gt: Int

  """All values greater than or equal the given value."""
  speakerTag_gte: Int
  video: VideoUploadWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockToSpeechAPIWord_every: SpeechAPIConversationBlockWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockToSpeechAPIWord_some: SpeechAPIConversationBlockWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockToSpeechAPIWord_none: SpeechAPIConversationBlockWhereInput
}

input SpeechAPIWordWhereUniqueInput {
  id: ID
}

type Subscription {
  speaker(where: SpeakerSubscriptionWhereInput): SpeakerSubscriptionPayload
  speechAPIConversation(where: SpeechAPIConversationSubscriptionWhereInput): SpeechAPIConversationSubscriptionPayload
  source(where: SourceSubscriptionWhereInput): SourceSubscriptionPayload
  publication(where: PublicationSubscriptionWhereInput): PublicationSubscriptionPayload
  date(where: DateSubscriptionWhereInput): DateSubscriptionPayload
  thumbnail(where: ThumbnailSubscriptionWhereInput): ThumbnailSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  videoMetadata(where: VideoMetadataSubscriptionWhereInput): VideoMetadataSubscriptionPayload
  speechAPIWord(where: SpeechAPIWordSubscriptionWhereInput): SpeechAPIWordSubscriptionPayload
  speechAPIConversationBlock(where: SpeechAPIConversationBlockSubscriptionWhereInput): SpeechAPIConversationBlockSubscriptionPayload
  videoUpload(where: VideoUploadSubscriptionWhereInput): VideoUploadSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  videoStorageLink(where: VideoStorageLinkSubscriptionWhereInput): VideoStorageLinkSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  name: String!
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  videos: VideoCreateManyInput
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateDataInput {
  name: String
  videos: VideoUpdateManyInput
}

input TagUpdateInput {
  name: String
  videos: VideoUpdateManyInput
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  videos_every: VideoWhereInput
  videos_some: VideoWhereInput
  videos_none: VideoWhereInput
  _MagicalBackRelation_TagToVideoMetadata_every: VideoMetadataWhereInput
  _MagicalBackRelation_TagToVideoMetadata_some: VideoMetadataWhereInput
  _MagicalBackRelation_TagToVideoMetadata_none: VideoMetadataWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

type Thumbnail implements Node {
  id: ID!
  videoID: ID!
  path: String!
  bucket: String!
}

"""A connection to a list of items."""
type ThumbnailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ThumbnailEdge]!
  aggregate: AggregateThumbnail!
}

input ThumbnailCreateInput {
  videoID: ID!
  path: String!
  bucket: String!
}

input ThumbnailCreateOneInput {
  create: ThumbnailCreateInput
  connect: ThumbnailWhereUniqueInput
}

"""An edge in a connection."""
type ThumbnailEdge {
  """The item at the end of the edge."""
  node: Thumbnail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ThumbnailOrderByInput {
  id_ASC
  id_DESC
  videoID_ASC
  videoID_DESC
  path_ASC
  path_DESC
  bucket_ASC
  bucket_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ThumbnailPreviousValues {
  id: ID!
  videoID: ID!
  path: String!
  bucket: String!
}

type ThumbnailSubscriptionPayload {
  mutation: MutationType!
  node: Thumbnail
  updatedFields: [String!]
  previousValues: ThumbnailPreviousValues
}

input ThumbnailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ThumbnailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ThumbnailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ThumbnailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ThumbnailWhereInput
}

input ThumbnailUpdateDataInput {
  videoID: ID
  path: String
  bucket: String
}

input ThumbnailUpdateInput {
  videoID: ID
  path: String
  bucket: String
}

input ThumbnailUpdateOneInput {
  create: ThumbnailCreateInput
  connect: ThumbnailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ThumbnailUpdateDataInput
  upsert: ThumbnailUpsertNestedInput
}

input ThumbnailUpsertNestedInput {
  update: ThumbnailUpdateDataInput!
  create: ThumbnailCreateInput!
}

input ThumbnailWhereInput {
  """Logical AND on all given filters."""
  AND: [ThumbnailWhereInput!]

  """Logical OR on all given filters."""
  OR: [ThumbnailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ThumbnailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  videoID: ID

  """All values that are not equal to given value."""
  videoID_not: ID

  """All values that are contained in given list."""
  videoID_in: [ID!]

  """All values that are not contained in given list."""
  videoID_not_in: [ID!]

  """All values less than the given value."""
  videoID_lt: ID

  """All values less than or equal the given value."""
  videoID_lte: ID

  """All values greater than the given value."""
  videoID_gt: ID

  """All values greater than or equal the given value."""
  videoID_gte: ID

  """All values containing the given string."""
  videoID_contains: ID

  """All values not containing the given string."""
  videoID_not_contains: ID

  """All values starting with the given string."""
  videoID_starts_with: ID

  """All values not starting with the given string."""
  videoID_not_starts_with: ID

  """All values ending with the given string."""
  videoID_ends_with: ID

  """All values not ending with the given string."""
  videoID_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  bucket: String

  """All values that are not equal to given value."""
  bucket_not: String

  """All values that are contained in given list."""
  bucket_in: [String!]

  """All values that are not contained in given list."""
  bucket_not_in: [String!]

  """All values less than the given value."""
  bucket_lt: String

  """All values less than or equal the given value."""
  bucket_lte: String

  """All values greater than the given value."""
  bucket_gt: String

  """All values greater than or equal the given value."""
  bucket_gte: String

  """All values containing the given string."""
  bucket_contains: String

  """All values not containing the given string."""
  bucket_not_contains: String

  """All values starting with the given string."""
  bucket_starts_with: String

  """All values not starting with the given string."""
  bucket_not_starts_with: String

  """All values ending with the given string."""
  bucket_ends_with: String

  """All values not ending with the given string."""
  bucket_not_ends_with: String
  _MagicalBackRelation_VideoUploadThumbnailRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoUploadThumbnailRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoUploadThumbnailRelation_none: VideoUploadWhereInput
}

input ThumbnailWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String
  auth0Id: String
  role: Role
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: [AdminRole!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateadminRolesInput {
  set: [AdminRole!]
}

input UserCreateInput {
  email: String
  auth0Id: String
  role: Role
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: UserCreateadminRolesInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  auth0Id_ASC
  auth0Id_DESC
  role_ASC
  role_DESC
  displayName_ASC
  displayName_DESC
  avatar_ASC
  avatar_DESC
  givenName_ASC
  givenName_DESC
  familyName_ASC
  familyName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  auth0Id: String
  role: Role
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: [AdminRole!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateadminRolesInput {
  set: [AdminRole!]
}

input UserUpdateDataInput {
  email: String
  auth0Id: String
  role: Role
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: UserUpdateadminRolesInput
}

input UserUpdateInput {
  email: String
  auth0Id: String
  role: Role
  displayName: String
  avatar: String
  givenName: String
  familyName: String
  adminRoles: UserUpdateadminRolesInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  auth0Id: String

  """All values that are not equal to given value."""
  auth0Id_not: String

  """All values that are contained in given list."""
  auth0Id_in: [String!]

  """All values that are not contained in given list."""
  auth0Id_not_in: [String!]

  """All values less than the given value."""
  auth0Id_lt: String

  """All values less than or equal the given value."""
  auth0Id_lte: String

  """All values greater than the given value."""
  auth0Id_gt: String

  """All values greater than or equal the given value."""
  auth0Id_gte: String

  """All values containing the given string."""
  auth0Id_contains: String

  """All values not containing the given string."""
  auth0Id_not_contains: String

  """All values starting with the given string."""
  auth0Id_starts_with: String

  """All values not starting with the given string."""
  auth0Id_not_starts_with: String

  """All values ending with the given string."""
  auth0Id_ends_with: String

  """All values not ending with the given string."""
  auth0Id_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  givenName: String

  """All values that are not equal to given value."""
  givenName_not: String

  """All values that are contained in given list."""
  givenName_in: [String!]

  """All values that are not contained in given list."""
  givenName_not_in: [String!]

  """All values less than the given value."""
  givenName_lt: String

  """All values less than or equal the given value."""
  givenName_lte: String

  """All values greater than the given value."""
  givenName_gt: String

  """All values greater than or equal the given value."""
  givenName_gte: String

  """All values containing the given string."""
  givenName_contains: String

  """All values not containing the given string."""
  givenName_not_contains: String

  """All values starting with the given string."""
  givenName_starts_with: String

  """All values not starting with the given string."""
  givenName_not_starts_with: String

  """All values ending with the given string."""
  givenName_ends_with: String

  """All values not ending with the given string."""
  givenName_not_ends_with: String
  familyName: String

  """All values that are not equal to given value."""
  familyName_not: String

  """All values that are contained in given list."""
  familyName_in: [String!]

  """All values that are not contained in given list."""
  familyName_not_in: [String!]

  """All values less than the given value."""
  familyName_lt: String

  """All values less than or equal the given value."""
  familyName_lte: String

  """All values greater than the given value."""
  familyName_gt: String

  """All values greater than or equal the given value."""
  familyName_gte: String

  """All values containing the given string."""
  familyName_contains: String

  """All values not containing the given string."""
  familyName_not_contains: String

  """All values starting with the given string."""
  familyName_starts_with: String

  """All values not starting with the given string."""
  familyName_not_starts_with: String

  """All values ending with the given string."""
  familyName_ends_with: String

  """All values not ending with the given string."""
  familyName_not_ends_with: String
  _MagicalBackRelation_VideoSubmitter_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoSubmitter_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoSubmitter_none: VideoUploadWhereInput
  _MagicalBackRelation_VideoPublisher_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoPublisher_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoPublisher_none: VideoUploadWhereInput
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
}

type Video implements Node {
  id: ID!
  published: Boolean
  advertisingEnabled: Boolean
  views: Int
}

"""A connection to a list of items."""
type VideoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  published: Boolean
  advertisingEnabled: Boolean
  views: Int
}

input VideoCreateManyInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input VideoCreateOneInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

"""An edge in a connection."""
type VideoEdge {
  """The item at the end of the edge."""
  node: Video!

  """A cursor for use in pagination."""
  cursor: String!
}

type VideoMetadata {
  title: String
  subtitle: String
  advertisingEnabled: Boolean!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  sources(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Source!]
  dateRecorded(where: DateWhereInput): Date
  views: Int!
}

"""A connection to a list of items."""
type VideoMetadataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoMetadataEdge]!
  aggregate: AggregateVideoMetadata!
}

input VideoMetadataCreateInput {
  title: String
  subtitle: String
  advertisingEnabled: Boolean
  views: Int
  tags: TagCreateManyInput
  sources: SourceCreateManyInput
  dateRecorded: DateCreateOneInput
}

input VideoMetadataCreateOneInput {
  create: VideoMetadataCreateInput
}

"""An edge in a connection."""
type VideoMetadataEdge {
  """The item at the end of the edge."""
  node: VideoMetadata!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VideoMetadataOrderByInput {
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  advertisingEnabled_ASC
  advertisingEnabled_DESC
  views_ASC
  views_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoMetadataPreviousValues {
  title: String
  subtitle: String
  advertisingEnabled: Boolean!
  views: Int!
}

type VideoMetadataSubscriptionPayload {
  mutation: MutationType!
  node: VideoMetadata
  updatedFields: [String!]
  previousValues: VideoMetadataPreviousValues
}

input VideoMetadataSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoMetadataSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoMetadataSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoMetadataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoMetadataWhereInput
}

input VideoMetadataUpdateDataInput {
  title: String
  subtitle: String
  advertisingEnabled: Boolean
  views: Int
  tags: TagUpdateManyInput
  sources: SourceUpdateManyInput
  dateRecorded: DateUpdateOneInput
}

input VideoMetadataUpdateInput {
  title: String
  subtitle: String
  advertisingEnabled: Boolean
  views: Int
  tags: TagUpdateManyInput
  sources: SourceUpdateManyInput
  dateRecorded: DateUpdateOneInput
}

input VideoMetadataUpdateOneInput {
  create: VideoMetadataCreateInput
  disconnect: Boolean
  delete: Boolean
  update: VideoMetadataUpdateDataInput
  upsert: VideoMetadataUpsertNestedInput
}

input VideoMetadataUpsertNestedInput {
  update: VideoMetadataUpdateDataInput!
  create: VideoMetadataCreateInput!
}

input VideoMetadataWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoMetadataWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoMetadataWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoMetadataWhereInput!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  advertisingEnabled: Boolean

  """All values that are not equal to given value."""
  advertisingEnabled_not: Boolean
  views: Int

  """All values that are not equal to given value."""
  views_not: Int

  """All values that are contained in given list."""
  views_in: [Int!]

  """All values that are not contained in given list."""
  views_not_in: [Int!]

  """All values less than the given value."""
  views_lt: Int

  """All values less than or equal the given value."""
  views_lte: Int

  """All values greater than the given value."""
  views_gt: Int

  """All values greater than or equal the given value."""
  views_gte: Int
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  sources_every: SourceWhereInput
  sources_some: SourceWhereInput
  sources_none: SourceWhereInput
  dateRecorded: DateWhereInput
  _MagicalBackRelation_VideoUploadMetadataRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoUploadMetadataRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoUploadMetadataRelation_none: VideoUploadWhereInput
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  advertisingEnabled_ASC
  advertisingEnabled_DESC
  views_ASC
  views_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoPreviousValues {
  id: ID!
  published: Boolean
  advertisingEnabled: Boolean
  views: Int
}

type VideoStorageLink implements Node {
  id: ID!
  videoID: ID!
  path: String!
  bucket: String!
  version: VideoVersion!
}

"""A connection to a list of items."""
type VideoStorageLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoStorageLinkEdge]!
  aggregate: AggregateVideoStorageLink!
}

input VideoStorageLinkCreateInput {
  videoID: ID!
  path: String!
  bucket: String!
  version: VideoVersion!
}

input VideoStorageLinkCreateOneInput {
  create: VideoStorageLinkCreateInput
  connect: VideoStorageLinkWhereUniqueInput
}

"""An edge in a connection."""
type VideoStorageLinkEdge {
  """The item at the end of the edge."""
  node: VideoStorageLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VideoStorageLinkOrderByInput {
  id_ASC
  id_DESC
  videoID_ASC
  videoID_DESC
  path_ASC
  path_DESC
  bucket_ASC
  bucket_DESC
  version_ASC
  version_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoStorageLinkPreviousValues {
  id: ID!
  videoID: ID!
  path: String!
  bucket: String!
  version: VideoVersion!
}

type VideoStorageLinkSubscriptionPayload {
  mutation: MutationType!
  node: VideoStorageLink
  updatedFields: [String!]
  previousValues: VideoStorageLinkPreviousValues
}

input VideoStorageLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoStorageLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoStorageLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoStorageLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoStorageLinkWhereInput
}

input VideoStorageLinkUpdateDataInput {
  videoID: ID
  path: String
  bucket: String
  version: VideoVersion
}

input VideoStorageLinkUpdateInput {
  videoID: ID
  path: String
  bucket: String
  version: VideoVersion
}

input VideoStorageLinkUpdateOneInput {
  create: VideoStorageLinkCreateInput
  connect: VideoStorageLinkWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VideoStorageLinkUpdateDataInput
  upsert: VideoStorageLinkUpsertNestedInput
}

input VideoStorageLinkUpsertNestedInput {
  update: VideoStorageLinkUpdateDataInput!
  create: VideoStorageLinkCreateInput!
}

input VideoStorageLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoStorageLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoStorageLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoStorageLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  videoID: ID

  """All values that are not equal to given value."""
  videoID_not: ID

  """All values that are contained in given list."""
  videoID_in: [ID!]

  """All values that are not contained in given list."""
  videoID_not_in: [ID!]

  """All values less than the given value."""
  videoID_lt: ID

  """All values less than or equal the given value."""
  videoID_lte: ID

  """All values greater than the given value."""
  videoID_gt: ID

  """All values greater than or equal the given value."""
  videoID_gte: ID

  """All values containing the given string."""
  videoID_contains: ID

  """All values not containing the given string."""
  videoID_not_contains: ID

  """All values starting with the given string."""
  videoID_starts_with: ID

  """All values not starting with the given string."""
  videoID_not_starts_with: ID

  """All values ending with the given string."""
  videoID_ends_with: ID

  """All values not ending with the given string."""
  videoID_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  bucket: String

  """All values that are not equal to given value."""
  bucket_not: String

  """All values that are contained in given list."""
  bucket_in: [String!]

  """All values that are not contained in given list."""
  bucket_not_in: [String!]

  """All values less than the given value."""
  bucket_lt: String

  """All values less than or equal the given value."""
  bucket_lte: String

  """All values greater than the given value."""
  bucket_gt: String

  """All values greater than or equal the given value."""
  bucket_gte: String

  """All values containing the given string."""
  bucket_contains: String

  """All values not containing the given string."""
  bucket_not_contains: String

  """All values starting with the given string."""
  bucket_starts_with: String

  """All values not starting with the given string."""
  bucket_not_starts_with: String

  """All values ending with the given string."""
  bucket_ends_with: String

  """All values not ending with the given string."""
  bucket_not_ends_with: String
  version: VideoVersion

  """All values that are not equal to given value."""
  version_not: VideoVersion

  """All values that are contained in given list."""
  version_in: [VideoVersion!]

  """All values that are not contained in given list."""
  version_not_in: [VideoVersion!]
  _MagicalBackRelation_VideoMp4LinkRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoMp4LinkRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoMp4LinkRelation_none: VideoUploadWhereInput
  _MagicalBackRelation_VideoFlacLinkRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoFlacLinkRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoFlacLinkRelation_none: VideoUploadWhereInput
  _MagicalBackRelation_VideoStorageRawRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoStorageRawRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoStorageRawRelation_none: VideoUploadWhereInput
  _MagicalBackRelation_VideoWebmLinkRelation_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoWebmLinkRelation_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoWebmLinkRelation_none: VideoUploadWhereInput
}

input VideoStorageLinkWhereUniqueInput {
  id: ID
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
}

input VideoUpdateDataInput {
  published: Boolean
  advertisingEnabled: Boolean
  views: Int
}

input VideoUpdateInput {
  published: Boolean
  advertisingEnabled: Boolean
  views: Int
}

input VideoUpdateManyInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
  disconnect: [VideoWhereUniqueInput!]
  delete: [VideoWhereUniqueInput!]
  update: [VideoUpdateWithWhereUniqueNestedInput!]
  upsert: [VideoUpsertWithWhereUniqueNestedInput!]
}

input VideoUpdateOneInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VideoUpdateDataInput
  upsert: VideoUpsertNestedInput
}

input VideoUpdateWithWhereUniqueNestedInput {
  where: VideoWhereUniqueInput!
  data: VideoUpdateDataInput!
}

type VideoUpload implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  submitedBy(where: UserWhereInput): User!
  publishedBy(where: UserWhereInput): User
  publishedVideo(where: VideoWhereInput): Video
  submitedUrl: String!
  status: VideoUploadStatus!
  state: VideoUploadState!
  published: Boolean!
  rawStorageLink(where: VideoStorageLinkWhereInput): VideoStorageLink
  webmLink(where: VideoStorageLinkWhereInput): VideoStorageLink
  mp4Link(where: VideoStorageLinkWhereInput): VideoStorageLink
  flacLink(where: VideoStorageLinkWhereInput): VideoStorageLink
  metadata(where: VideoMetadataWhereInput): VideoMetadata
  thumbnail(where: ThumbnailWhereInput): Thumbnail
  generatedConversation(where: SpeechAPIConversationWhereInput): SpeechAPIConversation
}

"""A connection to a list of items."""
type VideoUploadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoUploadEdge]!
  aggregate: AggregateVideoUpload!
}

input VideoUploadCreateInput {
  submitedUrl: String!
  status: VideoUploadStatus!
  state: VideoUploadState
  published: Boolean
  submitedBy: UserCreateOneInput!
  publishedBy: UserCreateOneInput
  publishedVideo: VideoCreateOneInput
  rawStorageLink: VideoStorageLinkCreateOneInput
  webmLink: VideoStorageLinkCreateOneInput
  mp4Link: VideoStorageLinkCreateOneInput
  flacLink: VideoStorageLinkCreateOneInput
  metadata: VideoMetadataCreateOneInput
  thumbnail: ThumbnailCreateOneInput
  generatedConversation: SpeechAPIConversationCreateOneWithoutVideoInput
}

input VideoUploadCreateOneInput {
  create: VideoUploadCreateInput
  connect: VideoUploadWhereUniqueInput
}

input VideoUploadCreateOneWithoutGeneratedConversationInput {
  create: VideoUploadCreateWithoutGeneratedConversationInput
  connect: VideoUploadWhereUniqueInput
}

input VideoUploadCreateWithoutGeneratedConversationInput {
  submitedUrl: String!
  status: VideoUploadStatus!
  state: VideoUploadState
  published: Boolean
  submitedBy: UserCreateOneInput!
  publishedBy: UserCreateOneInput
  publishedVideo: VideoCreateOneInput
  rawStorageLink: VideoStorageLinkCreateOneInput
  webmLink: VideoStorageLinkCreateOneInput
  mp4Link: VideoStorageLinkCreateOneInput
  flacLink: VideoStorageLinkCreateOneInput
  metadata: VideoMetadataCreateOneInput
  thumbnail: ThumbnailCreateOneInput
}

"""An edge in a connection."""
type VideoUploadEdge {
  """The item at the end of the edge."""
  node: VideoUpload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VideoUploadOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  submitedUrl_ASC
  submitedUrl_DESC
  status_ASC
  status_DESC
  state_ASC
  state_DESC
  published_ASC
  published_DESC
}

type VideoUploadPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  submitedUrl: String!
  status: VideoUploadStatus!
  state: VideoUploadState!
  published: Boolean!
}

enum VideoUploadState {
  PENDING
  PROCESSING
  REJECTED
  FAILED
  PUBLISHED
}

enum VideoUploadStatus {
  AWAITING_PROCESSING
  DOWNLOADING
  READY_TO_RENDER
  RENDERING
  NEEDS_THUMBNAILS
  GENERATING_THUMBNAILS
  NEEDS_REVIEW
  AWAITING_TRANSCRIPTION
  NEEDS_METADATA
  READY_TO_PUBLISH
}

type VideoUploadSubscriptionPayload {
  mutation: MutationType!
  node: VideoUpload
  updatedFields: [String!]
  previousValues: VideoUploadPreviousValues
}

input VideoUploadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoUploadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoUploadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoUploadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoUploadWhereInput
}

input VideoUploadUpdateDataInput {
  submitedUrl: String
  status: VideoUploadStatus
  state: VideoUploadState
  published: Boolean
  submitedBy: UserUpdateOneInput
  publishedBy: UserUpdateOneInput
  publishedVideo: VideoUpdateOneInput
  rawStorageLink: VideoStorageLinkUpdateOneInput
  webmLink: VideoStorageLinkUpdateOneInput
  mp4Link: VideoStorageLinkUpdateOneInput
  flacLink: VideoStorageLinkUpdateOneInput
  metadata: VideoMetadataUpdateOneInput
  thumbnail: ThumbnailUpdateOneInput
  generatedConversation: SpeechAPIConversationUpdateOneWithoutVideoInput
}

input VideoUploadUpdateInput {
  submitedUrl: String
  status: VideoUploadStatus
  state: VideoUploadState
  published: Boolean
  submitedBy: UserUpdateOneInput
  publishedBy: UserUpdateOneInput
  publishedVideo: VideoUpdateOneInput
  rawStorageLink: VideoStorageLinkUpdateOneInput
  webmLink: VideoStorageLinkUpdateOneInput
  mp4Link: VideoStorageLinkUpdateOneInput
  flacLink: VideoStorageLinkUpdateOneInput
  metadata: VideoMetadataUpdateOneInput
  thumbnail: ThumbnailUpdateOneInput
  generatedConversation: SpeechAPIConversationUpdateOneWithoutVideoInput
}

input VideoUploadUpdateOneInput {
  create: VideoUploadCreateInput
  connect: VideoUploadWhereUniqueInput
  delete: Boolean
  update: VideoUploadUpdateDataInput
  upsert: VideoUploadUpsertNestedInput
}

input VideoUploadUpdateOneWithoutGeneratedConversationInput {
  create: VideoUploadCreateWithoutGeneratedConversationInput
  connect: VideoUploadWhereUniqueInput
  delete: Boolean
  update: VideoUploadUpdateWithoutGeneratedConversationDataInput
  upsert: VideoUploadUpsertWithoutGeneratedConversationInput
}

input VideoUploadUpdateWithoutGeneratedConversationDataInput {
  submitedUrl: String
  status: VideoUploadStatus
  state: VideoUploadState
  published: Boolean
  submitedBy: UserUpdateOneInput
  publishedBy: UserUpdateOneInput
  publishedVideo: VideoUpdateOneInput
  rawStorageLink: VideoStorageLinkUpdateOneInput
  webmLink: VideoStorageLinkUpdateOneInput
  mp4Link: VideoStorageLinkUpdateOneInput
  flacLink: VideoStorageLinkUpdateOneInput
  metadata: VideoMetadataUpdateOneInput
  thumbnail: ThumbnailUpdateOneInput
}

input VideoUploadUpsertNestedInput {
  update: VideoUploadUpdateDataInput!
  create: VideoUploadCreateInput!
}

input VideoUploadUpsertWithoutGeneratedConversationInput {
  update: VideoUploadUpdateWithoutGeneratedConversationDataInput!
  create: VideoUploadCreateWithoutGeneratedConversationInput!
}

input VideoUploadWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoUploadWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoUploadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoUploadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  submitedUrl: String

  """All values that are not equal to given value."""
  submitedUrl_not: String

  """All values that are contained in given list."""
  submitedUrl_in: [String!]

  """All values that are not contained in given list."""
  submitedUrl_not_in: [String!]

  """All values less than the given value."""
  submitedUrl_lt: String

  """All values less than or equal the given value."""
  submitedUrl_lte: String

  """All values greater than the given value."""
  submitedUrl_gt: String

  """All values greater than or equal the given value."""
  submitedUrl_gte: String

  """All values containing the given string."""
  submitedUrl_contains: String

  """All values not containing the given string."""
  submitedUrl_not_contains: String

  """All values starting with the given string."""
  submitedUrl_starts_with: String

  """All values not starting with the given string."""
  submitedUrl_not_starts_with: String

  """All values ending with the given string."""
  submitedUrl_ends_with: String

  """All values not ending with the given string."""
  submitedUrl_not_ends_with: String
  status: VideoUploadStatus

  """All values that are not equal to given value."""
  status_not: VideoUploadStatus

  """All values that are contained in given list."""
  status_in: [VideoUploadStatus!]

  """All values that are not contained in given list."""
  status_not_in: [VideoUploadStatus!]
  state: VideoUploadState

  """All values that are not equal to given value."""
  state_not: VideoUploadState

  """All values that are contained in given list."""
  state_in: [VideoUploadState!]

  """All values that are not contained in given list."""
  state_not_in: [VideoUploadState!]
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  submitedBy: UserWhereInput
  publishedBy: UserWhereInput
  publishedVideo: VideoWhereInput
  rawStorageLink: VideoStorageLinkWhereInput
  webmLink: VideoStorageLinkWhereInput
  mp4Link: VideoStorageLinkWhereInput
  flacLink: VideoStorageLinkWhereInput
  metadata: VideoMetadataWhereInput
  thumbnail: ThumbnailWhereInput
  generatedConversation: SpeechAPIConversationWhereInput
  _MagicalBackRelation_SpeechAPIWordVideoRelation_every: SpeechAPIWordWhereInput
  _MagicalBackRelation_SpeechAPIWordVideoRelation_some: SpeechAPIWordWhereInput
  _MagicalBackRelation_SpeechAPIWordVideoRelation_none: SpeechAPIWordWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockVideoRelation_every: SpeechAPIConversationBlockWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockVideoRelation_some: SpeechAPIConversationBlockWhereInput
  _MagicalBackRelation_SpeechAPIConversationBlockVideoRelation_none: SpeechAPIConversationBlockWhereInput
}

input VideoUploadWhereUniqueInput {
  id: ID
  submitedUrl: String
}

input VideoUpsertNestedInput {
  update: VideoUpdateDataInput!
  create: VideoCreateInput!
}

input VideoUpsertWithWhereUniqueNestedInput {
  where: VideoWhereUniqueInput!
  update: VideoUpdateDataInput!
  create: VideoCreateInput!
}

enum VideoVersion {
  RAW
  WEBM
  MP4
  FLAC
}

input VideoWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  advertisingEnabled: Boolean

  """All values that are not equal to given value."""
  advertisingEnabled_not: Boolean
  views: Int

  """All values that are not equal to given value."""
  views_not: Int

  """All values that are contained in given list."""
  views_in: [Int!]

  """All values that are not contained in given list."""
  views_not_in: [Int!]

  """All values less than the given value."""
  views_lt: Int

  """All values less than or equal the given value."""
  views_lte: Int

  """All values greater than the given value."""
  views_gt: Int

  """All values greater than or equal the given value."""
  views_gte: Int
  _MagicalBackRelation_SourceToVideo_every: SourceWhereInput
  _MagicalBackRelation_SourceToVideo_some: SourceWhereInput
  _MagicalBackRelation_SourceToVideo_none: SourceWhereInput
  _MagicalBackRelation_TagToVideo_every: TagWhereInput
  _MagicalBackRelation_TagToVideo_some: TagWhereInput
  _MagicalBackRelation_TagToVideo_none: TagWhereInput
  _MagicalBackRelation_VideoToVideoUpload_every: VideoUploadWhereInput
  _MagicalBackRelation_VideoToVideoUpload_some: VideoUploadWhereInput
  _MagicalBackRelation_VideoToVideoUpload_none: VideoUploadWhereInput
}

input VideoWhereUniqueInput {
  id: ID
}
