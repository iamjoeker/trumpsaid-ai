/** Declaration file generated by dts-gen */

export const SPEC_URL: string;

export function FileMissingUploadError(...args: any[]): void;

export function FileStreamDisconnectUploadError(...args: any[]): void;

export function FilesBeforeMapUploadError(...args: any[]): void;

export function MapBeforeOperationsUploadError(...args: any[]): void;

export function MaxFileSizeUploadError(...args: any[]): void;

export function MaxFilesUploadError(...args: any[]): void;

export function UploadError(...args: any[]): void;

export function UploadPromiseDisconnectUploadError(...args: any[]): void;

export function apolloUploadExpress(options: any): any;

export function apolloUploadKoa(options: any): any;

export function processRequest(request: any, { maxFieldSize, maxFileSize, maxFiles }: any): any;

export namespace FileMissingUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace FileStreamDisconnectUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace FilesBeforeMapUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace GraphQLUpload {
    const astNode: any;

    const description: string;

    const name: string;

    function inspect(): any;

    function parseLiteral(valueNode: any, variables: any): any;

    function parseValue(value: any): any;

    function serialize(value: any): any;

    function toJSON(): any;

    function toString(): any;

    namespace inspect {
        const prototype: {
        };

    }

    namespace parseLiteral {
        const prototype: {
        };

    }

    namespace parseValue {
        const prototype: {
        };

    }

    namespace serialize {
        const prototype: {
        };

    }

    namespace toJSON {
        const prototype: {
        };

    }

    namespace toString {
        const prototype: {
        };

    }

}

export namespace MapBeforeOperationsUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace MaxFileSizeUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace MaxFilesUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace UploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

export namespace UploadPromiseDisconnectUploadError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}

