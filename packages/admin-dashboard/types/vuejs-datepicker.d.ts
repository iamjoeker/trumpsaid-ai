/** Declaration file generated by dts-gen */

export const components: {
    DateInput: {
        computed: {
            computedInputClass: any;
            formattedValue: any;
        };
        data: any;
        methods: {
            clearDate: any;
            inputBlurred: any;
            parseTypedDate: any;
            showCalendar: any;
        };
        mounted: any;
        props: {
            bootstrapStyling: any;
            calendarButton: any;
            calendarButtonIcon: any;
            calendarButtonIconContent: any;
            clearButton: any;
            clearButtonIcon: any;
            disabled: any;
            format: any[];
            id: any;
            inline: any;
            inputClass: any[];
            name: any;
            openDate: any;
            placeholder: any;
            refName: any;
            required: any;
            resetTypedDate: any[];
            selectedDate: any;
            translation: any;
            typeable: any;
            useUtc: any;
        };
        render: any;
        staticRenderFns: any[];
        watch: {
            resetTypedDate: any;
        };
    };
    PickerDay: {
        computed: {
            blankDays: any;
            currMonthName: any;
            currYearName: any;
            days: any;
            daysOfWeek: any;
            isLeftNavDisabled: any;
            isRightNavDisabled: any;
            isYmd: any;
        };
        data: any;
        methods: {
            changeMonth: any;
            dayClasses: any;
            getPageMonth: any;
            isDefined: any;
            isDisabledDate: any;
            isHighlightEnd: any;
            isHighlightStart: any;
            isHighlightedDate: any;
            isNextMonthDisabled: any;
            isPreviousMonthDisabled: any;
            isSelectedDate: any;
            nextMonth: any;
            previousMonth: any;
            selectDate: any;
            showMonthCalendar: any;
        };
        props: {
            allowedToShowView: any;
            calendarClass: any[];
            calendarStyle: any;
            dayCellContent: {
                default: any;
                type: any;
            };
            disabledDates: any;
            fullMonthName: any;
            highlighted: any;
            isRtl: any;
            mondayFirst: any;
            pageDate: any;
            pageTimestamp: any;
            selectedDate: any;
            showDayView: any;
            translation: any;
            useUtc: any;
        };
        render: any;
        staticRenderFns: any[];
    };
    PickerMonth: {
        computed: {
            isLeftNavDisabled: any;
            isRightNavDisabled: any;
            months: any;
            pageYearName: any;
        };
        data: any;
        methods: {
            changeYear: any;
            isDisabledMonth: any;
            isNextYearDisabled: any;
            isPreviousYearDisabled: any;
            isSelectedMonth: any;
            nextYear: any;
            previousYear: any;
            selectMonth: any;
            showYearCalendar: any;
        };
        props: {
            allowedToShowView: any;
            calendarClass: any[];
            calendarStyle: any;
            disabledDates: any;
            isRtl: any;
            pageDate: any;
            pageTimestamp: any;
            selectedDate: any;
            showMonthView: any;
            translation: any;
            useUtc: any;
        };
        render: any;
        staticRenderFns: any[];
    };
    PickerYear: {
        computed: {
            getPageDecade: any;
            isLeftNavDisabled: any;
            isRightNavDisabled: any;
            years: any;
        };
        data: any;
        methods: {
            changeYear: any;
            isDisabledYear: any;
            isNextDecadeDisabled: any;
            isPreviousDecadeDisabled: any;
            isSelectedYear: any;
            nextDecade: any;
            previousDecade: any;
            selectYear: any;
        };
        props: {
            allowedToShowView: any;
            calendarClass: any[];
            calendarStyle: any;
            disabledDates: any;
            highlighted: any;
            isRtl: any;
            pageDate: any;
            pageTimestamp: any;
            selectedDate: any;
            showYearView: any;
            translation: any;
            useUtc: any;
        };
        render: any;
        staticRenderFns: any[];
    };
};

export const staticRenderFns: any[];

export function data(): any;

export function mounted(): void;

export function render(): any;

export namespace computed {
    function calendarStyle(): any;

    function computedInitialView(): any;

    function isInline(): any;

    function isOpen(): any;

    function isRtl(): any;

    function pageDate(): any;

    function translation(): any;

    namespace calendarStyle {
        const prototype: {
        };

    }

    namespace computedInitialView {
        const prototype: {
        };

    }

    namespace isInline {
        const prototype: {
        };

    }

    namespace isOpen {
        const prototype: {
        };

    }

    namespace isRtl {
        const prototype: {
        };

    }

    namespace pageDate {
        const prototype: {
        };

    }

    namespace translation {
        const prototype: {
        };

    }

}

export namespace data {
    const prototype: {
    };

}

export namespace methods {
    function allowedToShowView(view: any): any;

    function clearDate(): void;

    function close(full: any): void;

    function handleChangedMonthFromDayPicker(date: any): void;

    function init(): void;

    function resetDefaultPageDate(): void;

    function selectDate(date: any): void;

    function selectDisabledDate(date: any): void;

    function selectMonth(month: any): void;

    function selectYear(year: any): void;

    function setDate(timestamp: any): void;

    function setInitialView(): void;

    function setPageDate(date: any): void;

    function setTypedDate(date: any): void;

    function setValue(date: any): void;

    function showCalendar(): any;

    function showDayCalendar(): any;

    function showMonthCalendar(): any;

    function showYearCalendar(): any;

    namespace allowedToShowView {
        const prototype: {
        };

    }

    namespace clearDate {
        const prototype: {
        };

    }

    namespace close {
        const prototype: {
        };

    }

    namespace handleChangedMonthFromDayPicker {
        const prototype: {
        };

    }

    namespace init {
        const prototype: {
        };

    }

    namespace resetDefaultPageDate {
        const prototype: {
        };

    }

    namespace selectDate {
        const prototype: {
        };

    }

    namespace selectDisabledDate {
        const prototype: {
        };

    }

    namespace selectMonth {
        const prototype: {
        };

    }

    namespace selectYear {
        const prototype: {
        };

    }

    namespace setDate {
        const prototype: {
        };

    }

    namespace setInitialView {
        const prototype: {
        };

    }

    namespace setPageDate {
        const prototype: {
        };

    }

    namespace setTypedDate {
        const prototype: {
        };

    }

    namespace setValue {
        const prototype: {
        };

    }

    namespace showCalendar {
        const prototype: {
        };

    }

    namespace showDayCalendar {
        const prototype: {
        };

    }

    namespace showMonthCalendar {
        const prototype: {
        };

    }

    namespace showYearCalendar {
        const prototype: {
        };

    }

}

export namespace mounted {
    const prototype: {
    };

}

export namespace props {
    class bootstrapStyling {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class calendarButton {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class calendarButtonIcon {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class calendarButtonIconContent {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class clearButton {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class clearButtonIcon {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class dayCellContent {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        apply(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        bind(p0: any): any;

        // Native method; no parameter or return type inference available
        call(p0: any): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        static prototype(): any;

    }

    class disabled {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class disabledDates {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        hasOwnProperty(p0: any): any;

        // Native method; no parameter or return type inference available
        isPrototypeOf(p0: any): any;

        // Native method; no parameter or return type inference available
        propertyIsEnumerable(p0: any): any;

        // Native method; no parameter or return type inference available
        toLocaleString(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static assign(p0: any, p1: any): any;

        static create(p0: any, p1: any): any;

        static defineProperties(p0: any, p1: any): any;

        static defineProperty(p0: any, p1: any, p2: any): any;

        static entries(p0: any): any;

        static freeze(p0: any): any;

        static getOwnPropertyDescriptor(p0: any, p1: any): any;

        static getOwnPropertyDescriptors(p0: any): any;

        static getOwnPropertyNames(p0: any): any;

        static getOwnPropertySymbols(p0: any): any;

        static getPrototypeOf(p0: any): any;

        static is(p0: any, p1: any): any;

        static isExtensible(p0: any): any;

        static isFrozen(p0: any): any;

        static isSealed(p0: any): any;

        static keys(p0: any): any;

        static preventExtensions(p0: any): any;

        static seal(p0: any): any;

        static setPrototypeOf(p0: any, p1: any): any;

        static values(p0: any): any;

    }

    class fullMonthName {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class highlighted {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        hasOwnProperty(p0: any): any;

        // Native method; no parameter or return type inference available
        isPrototypeOf(p0: any): any;

        // Native method; no parameter or return type inference available
        propertyIsEnumerable(p0: any): any;

        // Native method; no parameter or return type inference available
        toLocaleString(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static assign(p0: any, p1: any): any;

        static create(p0: any, p1: any): any;

        static defineProperties(p0: any, p1: any): any;

        static defineProperty(p0: any, p1: any, p2: any): any;

        static entries(p0: any): any;

        static freeze(p0: any): any;

        static getOwnPropertyDescriptor(p0: any, p1: any): any;

        static getOwnPropertyDescriptors(p0: any): any;

        static getOwnPropertyNames(p0: any): any;

        static getOwnPropertySymbols(p0: any): any;

        static getPrototypeOf(p0: any): any;

        static is(p0: any, p1: any): any;

        static isExtensible(p0: any): any;

        static isFrozen(p0: any): any;

        static isSealed(p0: any): any;

        static keys(p0: any): any;

        static preventExtensions(p0: any): any;

        static seal(p0: any): any;

        static setPrototypeOf(p0: any, p1: any): any;

        static values(p0: any): any;

    }

    class id {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class initialView {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class inline {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class mondayFirst {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class name {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class placeholder {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class refName {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        anchor(p0: any): any;

        // Native method; no parameter or return type inference available
        big(): any;

        // Native method; no parameter or return type inference available
        blink(): any;

        // Native method; no parameter or return type inference available
        bold(): any;

        // Native method; no parameter or return type inference available
        charAt(p0: any): any;

        // Native method; no parameter or return type inference available
        charCodeAt(p0: any): any;

        // Native method; no parameter or return type inference available
        codePointAt(p0: any): any;

        // Native method; no parameter or return type inference available
        concat(p0: any): any;

        // Native method; no parameter or return type inference available
        endsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        fixed(): any;

        // Native method; no parameter or return type inference available
        fontcolor(p0: any): any;

        // Native method; no parameter or return type inference available
        fontsize(p0: any): any;

        // Native method; no parameter or return type inference available
        includes(p0: any): any;

        // Native method; no parameter or return type inference available
        indexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        italics(): any;

        // Native method; no parameter or return type inference available
        lastIndexOf(p0: any): any;

        // Native method; no parameter or return type inference available
        link(p0: any): any;

        // Native method; no parameter or return type inference available
        localeCompare(p0: any): any;

        // Native method; no parameter or return type inference available
        match(p0: any): any;

        // Native method; no parameter or return type inference available
        normalize(): any;

        // Native method; no parameter or return type inference available
        padEnd(p0: any): any;

        // Native method; no parameter or return type inference available
        padStart(p0: any): any;

        // Native method; no parameter or return type inference available
        repeat(p0: any): any;

        // Native method; no parameter or return type inference available
        replace(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        search(p0: any): any;

        // Native method; no parameter or return type inference available
        slice(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        small(): any;

        // Native method; no parameter or return type inference available
        split(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        startsWith(p0: any): any;

        // Native method; no parameter or return type inference available
        strike(): any;

        // Native method; no parameter or return type inference available
        sub(): any;

        // Native method; no parameter or return type inference available
        substr(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        substring(p0: any, p1: any): any;

        // Native method; no parameter or return type inference available
        sup(): any;

        // Native method; no parameter or return type inference available
        toLocaleLowerCase(): any;

        // Native method; no parameter or return type inference available
        toLocaleUpperCase(): any;

        // Native method; no parameter or return type inference available
        toLowerCase(): any;

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        toUpperCase(): any;

        // Native method; no parameter or return type inference available
        trim(): any;

        // Native method; no parameter or return type inference available
        trimLeft(): any;

        // Native method; no parameter or return type inference available
        trimRight(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

        static fromCharCode(p0: any): any;

        static fromCodePoint(p0: any): any;

        static raw(p0: any): any;

    }

    class required {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class typeable {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    class useUtc {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        // Native method; no parameter or return type inference available
        valueOf(): any;

    }

    const calendarClass: any[];

    const format: {
        default: string;
        type: any[];
    };

    const inputClass: any[];

    const wrapperClass: any[];

    namespace bootstrapStyling {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace calendarButton {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace calendarButtonIcon {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace calendarButtonIconContent {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace clearButton {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace clearButtonIcon {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace dayCellContent {
        namespace prototype {
            function apply(p0: any, p1: any): any;

            function bind(p0: any): any;

            function call(p0: any): any;

            function toString(): any;

        }

    }

    namespace disabled {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace disabledDates {
        namespace prototype {
            function hasOwnProperty(p0: any): any;

            function isPrototypeOf(p0: any): any;

            function propertyIsEnumerable(p0: any): any;

            function toLocaleString(): any;

            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace fullMonthName {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace highlighted {
        namespace prototype {
            function hasOwnProperty(p0: any): any;

            function isPrototypeOf(p0: any): any;

            function propertyIsEnumerable(p0: any): any;

            function toLocaleString(): any;

            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace id {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace initialView {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace inline {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace language {
        class type {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        namespace type {
            namespace prototype {
                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const hasOwnProperty: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const isPrototypeOf: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const propertyIsEnumerable: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const toLocaleString: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const toString: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.language.type.prototype
                const valueOf: any;

            }

        }

    }

    namespace maximumView {
        class type {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace type {
            namespace prototype {
                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const anchor: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const big: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const blink: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const bold: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const charAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const charCodeAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const codePointAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const concat: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const endsWith: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const fixed: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const fontcolor: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const fontsize: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const includes: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const indexOf: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const italics: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const lastIndexOf: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const length: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const link: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const localeCompare: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const match: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const normalize: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const padEnd: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const padStart: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const repeat: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const replace: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const search: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const slice: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const small: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const split: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const startsWith: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const strike: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const sub: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const substr: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const substring: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const sup: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const toLocaleLowerCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const toLocaleUpperCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const toLowerCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const toString: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const toUpperCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const trim: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const trimLeft: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const trimRight: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.maximumView.type.prototype
                const valueOf: any;

            }

        }

    }

    namespace minimumView {
        class type {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace type {
            namespace prototype {
                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const anchor: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const big: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const blink: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const bold: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const charAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const charCodeAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const codePointAt: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const concat: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const endsWith: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const fixed: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const fontcolor: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const fontsize: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const includes: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const indexOf: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const italics: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const lastIndexOf: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const length: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const link: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const localeCompare: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const match: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const normalize: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const padEnd: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const padStart: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const repeat: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const replace: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const search: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const slice: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const small: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const split: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const startsWith: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const strike: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const sub: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const substr: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const substring: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const sup: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const toLocaleLowerCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const toLocaleUpperCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const toLowerCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const toString: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const toUpperCase: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const trim: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const trimLeft: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const trimRight: any;

                // Too-deep object hierarchy from vuejs_datepicker.props.minimumView.type.prototype
                const valueOf: any;

            }

        }

    }

    namespace mondayFirst {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace name {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace openDate {
        function validator(val: any): any;

        namespace validator {
            const prototype: {
            };

        }

    }

    namespace placeholder {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace refName {
        namespace prototype {
            const length: number;

            function anchor(p0: any): any;

            function big(): any;

            function blink(): any;

            function bold(): any;

            function charAt(p0: any): any;

            function charCodeAt(p0: any): any;

            function codePointAt(p0: any): any;

            function concat(p0: any): any;

            function endsWith(p0: any): any;

            function fixed(): any;

            function fontcolor(p0: any): any;

            function fontsize(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function italics(): any;

            function lastIndexOf(p0: any): any;

            function link(p0: any): any;

            function localeCompare(p0: any): any;

            function match(p0: any): any;

            function normalize(): any;

            function padEnd(p0: any): any;

            function padStart(p0: any): any;

            function repeat(p0: any): any;

            function replace(p0: any, p1: any): any;

            function search(p0: any): any;

            function slice(p0: any, p1: any): any;

            function small(): any;

            function split(p0: any, p1: any): any;

            function startsWith(p0: any): any;

            function strike(): any;

            function sub(): any;

            function substr(p0: any, p1: any): any;

            function substring(p0: any, p1: any): any;

            function sup(): any;

            function toLocaleLowerCase(): any;

            function toLocaleUpperCase(): any;

            function toLowerCase(): any;

            function toString(): any;

            function toUpperCase(): any;

            function trim(): any;

            function trimLeft(): any;

            function trimRight(): any;

            function valueOf(): any;

        }

    }

    namespace required {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace typeable {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace useUtc {
        namespace prototype {
            function toString(): any;

            function valueOf(): any;

        }

    }

    namespace value {
        function validator(val: any): any;

        namespace validator {
            const prototype: {
            };

        }

    }

}

export namespace render {
    const prototype: {
    };

}

export namespace watch {
    function initialView(): void;

    function openDate(): void;

    function value(value$1: any): void;

    namespace initialView {
        const prototype: {
        };

    }

    namespace openDate {
        const prototype: {
        };

    }

    namespace value {
        const prototype: {
        };

    }

}

